#---------------------------------------------------------------
#Aula 01-1: operações aritméticas
#---------------------------------------------------------------
p=2; q=3; r=12

a = 100 * (q // p) + r
print("a={}".format(a))

b = p * (r%5) - q/2
print("b={}".format(b))

#---------------------------------------------------------------
#Aula 01-2: troca 3 valores
#---------------------------------------------------------------
a=10; b=5; c=3

if (a > b): a,b = b,a  #se a > b, troca. (ex: 10,5,3 vira 5,10,3)  

if (b > c): b,c = c,b  #se b > c troca. (ex: 5,10,3 vira 5,3,10 - assim "c" está definido)

if (a > b): a,b = b,a  #se a > b, troca. (ex: 5,3,10 vira 3,5,10 - assim "a" e "b" estão definidos)  

print(a,b,c)

#---------------------------------------------------------------
#Aula 01-3: quantas vezes número real x pode ser dividido por 2
#           enquanto valor resultante for maior que 0,01 
#---------------------------------------------------------------
x = 2.5
k = 0
while (x > 0.01):
    x /= 2
    if (x > 0.01):
        k = k + 1
        print(x)

print('%d vezes' %k)

#---------------------------------------------------------------
#Aula 01-4: cálculo de s = (1/1) + (3/2) + (5/3) + (7/4) + … + (99/50)
#---------------------------------------------------------------

#calcula a série
s=0
denominador = 1
for numerador in range(1,100,2):
    s += numerador/denominador
    #print("+{}/{}={}".format(numerador, denominador, s)) #só para conferir...
    denominador += 1

#imprime com 2 casas decimais
print("s={:.2f}".format(s)) 

#---------------------------------------------------------------
#Aula 02-1: y = f(x) + g(x)
#---------------------------------------------------------------

h = lambda x: x**2 - 16

def f(x):
    if h(x) >= 0: return h(x)
    else: return 1

def g(x):
    if f(x) == 0: return x**2 + 16
    else: return 0

y = lambda x: f(x) + g(x)

x=5
print(y(x))

#obs.: é possível transformar f e g em lambda:
#f = lambda x: h(x) if h(x) >= 0 else 1
#g = lambda x: x**2 + 16 if h(x) == 0 else 0

#---------------------------------------------------------------
#Aula 02-2: função que calcula número harmônico
#---------------------------------------------------------------
def H(n):
    #rejeita se n não for positivo
    if n <= 0: return None
    
    H=1
    for k in range(2,n+1): H += 1/k
    return H

#testando a função
for n in range(1,11):
    print("H({}) = {:.2f}".format(n, H(n)))
    
#---------------------------------------------------------------
#Aula 02-3: mensagem alien
#---------------------------------------------------------------
def mensagem_alien(pessoa, tipo_alien):
    if (tipo_alien == 'B') or (tipo_alien == 'b'):
        msg = pessoa + ', eu vim em missão de paz!'
    elif (tipo_alien == 'M') or (tipo_alien == 'm'):
        msg = pessoa + ', eu vou te abduzir e escravizar!'
    else:
        msg = None
    return msg

print(mensagem_alien('Jennifer Lopez','B'))
print(mensagem_alien('50 Cent','M'))

#---------------------------------------------------------------
#Aula 02-4: função recursiva que calcula número harmônico
#---------------------------------------------------------------
def H(n):
    if n == 0: return 0
    else:
        return 1/n + H(n-1)

#testando a função
for n in range(0,11):
    print("H({}) = {:.2f}".format(n, H(n)))

#---------------------------------------------------------------
#Aula 03-1: lista com 3 números
#---------------------------------------------------------------
l=[10,5,3]

maior = max(l)
menor = min(l)
do_meio = sum(l) - maior - menor

print(menor, do_meio, maior)

#---------------------------------------------------------------
#Aula 03-2: listas v e w
#---------------------------------------------------------------
v = ['#']*6 #cria lista com 6 elementos
w = v[:]    #clona v
print(v, w) #imprime as duas listas
w[5] = '$'  #altera o último elemento de w
print(v, w) #imprime as duas listas

#---------------------------------------------------------------
#Aula 03-3: os dois maiores valores de uma lista
#---------------------------------------------------------------
v = [84,84,86,2,85,85,0,83,23,45,84,86,1,2,85]
print("v=",v)

v.sort(reverse=True)

primeiro = v[0] #acha o maior valor

#acha o menor valor
for i in range(1,len(v)):
    if v[i] != primeiro:
        segundo = v[i]
        break;

#imprime o maior valor e o segundo maior
print("maior={}, segundo maior={}".format(primeiro, segundo))

#---------------------------------------------------------------
#Aula 03-4: cria listas usando fatiamento e métodos de lista
#---------------------------------------------------------------
cores= ['amarelo', 'azul', 'branco', 'preto', 'verde', 'vermelho']
print("cores = ", cores)

l1=cores[:2]
print("l1 = ", l1)

l2=cores[1:4]
print("l2 = ", l2)

l3 = cores[:] #preciso clonar antes para não alterar a lista original
l3.reverse();
print("l3 = ", l3) 

l4 = cores[:] 
l4.remove("branco");
print("l4 = ", l4)

l5=cores[3:]
print("l5 = ", l5)

l6 = cores[:]
l6.insert(4,'rosa')
print("l6 = ", l6)

#---------------------------------------------------------------
#Aula 03-5: multiplica valores de uma lista por -1
#---------------------------------------------------------------
lst = [1,2,3,4,5]
lst2 = [x*-1 for x in lst]
print(lst, '->', lst2)

#---------------------------------------------------------------
#Aula 03-6: número harmônico com list comprehension
#---------------------------------------------------------------
n = 3
H = sum([1/k for k in range(1,n+1)])
print(H)

#---------------------------------------------------------------
#Aula 03-7: soma da diagonal de matriz (representada em lista 2d)
#---------------------------------------------------------------
m=[[1,3,5,7],
   [1,4,6,0],
   [7,6,9,0],
   [1,2,3,4]]

diagonal = [m[i][i] for i in range(len(m))]

print('elementos da diagonal: ', diagonal)
print('soma dos elementos da diagonal: ', sum(diagonal))

#---------------------------------------------------------------
#Aula 04-1: a ED conjunto e suas operações
#---------------------------------------------------------------
exame = {'Bella', 'Edward', 'Renesmee'}  
projeto = {'Jacob', 'Carlisle', 'Alice', 'Bella', 'Esme', 'Edward'}  

#Quais estudantes realizaram o exame e submeteram um projeto?
print(exame & projeto)

#Que estudantes apenas realizaram o exame? 
print(exame - projeto)
 
#Que estudantes apenas submeteram o projeto?
print(projeto - exame)

#Nomes de todos os estudantes
print(projeto | exame)

#todos os estudantes que apenas realizaram o exame ou apenas submeteram o projeto (mas não as duas coisas juntas)
print(projeto ^ exame)

#---------------------------------------------------------------
#Aula 04-2: DOJO -> palavras mais frequentes da letra de uma música
#---------------------------------------------------------------

letra = """O quê?
Que não é, o que não pode ser que
Não é o que não pode ser que não é
O que não pode ser que não
É o que não pode ser que não (diz)
O que não pode ser que
Não é o que não pode ser
Que não é o que (vem!)
O quê?
O quê?
O quê?
O quê?
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é, o que não pode ser que
Não é o que não pode ser que não é
O que não pode ser que não
É o que não pode ser que não (é, é, é)
O que não pode ser que
Não é o que não pode ser
Que não é o que (vem!)
O quê?
O quê?
O quê?
O quê?
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Não não não é
Não é! Não é!
Não não não é
Não é! Não é!
Não não não é
É!
Pode ser!
É!
Pode ser! Pode ser! Pode ser! Pode ser!
É!
É! É!
Pode ser!
É!
Pode ser! Pode ser! Pode ser! Pode ser!
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser, que não pode ser
Que não pode ser que não é
Que não é o que não pode ser, que não pode ser
Que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Que não é o que não pode ser que não é
Não não não é"""

#PASSO 1: formata a string 
#(remove ENTER e pontuação e converte tudo para minúsculo)
lst_simbolos = [",", "(", ")", "'", "?", "\n"]
for simbolo in lst_simbolos:
    letra = letra.replace(simbolo," ")

letra = letra.lower()

#PASSO 2: converte a string "letra" para uma lista de palavras
lst_letra = letra.split()

#PASSO 3: gera um dicionário onde a chave é a palavra
#         e o valor é o total de ocorrências
dic_freq = {}
for palavra in lst_letra:
    if dic_freq.get(palavra) is None:
        dic_freq[palavra] = 1
    else:
        dic_freq[palavra] += 1

#PASSO 4: converte "dic_freq" para uma lista de tuplas "lst_freq"
#         e ordena resultados de forma descendente pelo total de ocorrências
lst_freq = list()
for chave, valor in dic_freq.items():
    lst_freq.append((valor, chave))

lst_freq.sort(reverse=True)

#PASSO 5: imprime os resultados. A palavra mais frequente será impressa primeiro
#se quiser você pode fatiar (ex: lst_freq[:10] para imprimir as 10 primeiras)
print(lst_freq)

#---------------------------------------------------------------
#Aula 05-1: classe ProgressaoAritmetica
#           salve em um arquivo chamado pa.py 
#---------------------------------------------------------------
class ProgressaoAritmetica:
    
    #construtor
    def __init__(self, a1, r):
        self.a1 = a1
        self.r = r
    
    #retorna o termo an
    def termo(self, n):
        return self.a1 + (n-1) * self.r

    #retorna a sequência  com os n primeiros termos
    def sequencia(self, n):
        return [self.termo(x) for x in range(1, n+1)]

    #retorna a soma dos n primeiros termos
    def soma(self, n):
        return (n * (self.a1 + self.termo(n))) /2 

#---------------------------------------------------------------
#Aula 05-2: programa que usa a classe ProgressaoAritmetica
#           salve no mesmo local do arquivo "pa.py" 
#---------------------------------------------------------------
from pa import ProgressaoAritmetica

pa1 = ProgressaoAritmetica(1,2)
print(pa1.termo(6))
print(pa1.soma(6))
print(pa1.sequencia(6))
print("\n")

pa2 = ProgressaoAritmetica(9,-4)
print(pa2.termo(5))
print(pa2.soma(5))
print(pa2.sequencia(5))
print("\n")

pa3 = ProgressaoAritmetica(0,0.5)
print(pa3.termo(1))
print(pa3.soma(1))
print(pa3.sequencia(9))
print("\n")

pa4 = ProgressaoAritmetica(10,0)
print(pa4.termo(20))
print(pa4.soma(20))
print(pa4.sequencia(20))

#---------------------------------------------------------------
#Aula 05-3: DOJO -> CategoricalNB() - pacote scikit-learn
#---------------------------------------------------------------
import pandas as pd
from sklearn.naive_bayes import CategoricalNB

#------------------------------------------
#PARTE 1: definição do BD de treinamento
#         será estruturado um um objeto da classe DataFrame (pandas)
#------------------------------------------
dados_treino = {
      "love"        : [1,1,1,0,1,1,0,0,1,0,1,1,0,1,1],
      "people"      : [1,0,0,0,1,1,0,1,1,1,0,1,0,1,0],
      "relationship": [0,0,1,1,1,0,0,0,1,1,1,0,0,1,1],
      "romance":['S','N','S','S','N','S','N','N','S','N','S','N','N','S','S']
      }

#criando um DataFrame "D" com os dados de treino
D = pd.DataFrame(dados_treino)
print('- Dados de treino:')
print(D)

X=D[['love', 'people','relationship']]
Y=D['romance']

#------------------------------------------
#PARTE 2: treinar um Naive Bayes Categórico
#         usando a classe CategoricalNB do pacote sklearn
#------------------------------------------

#2.1-instanciar um objeto chamado nbc da classe CategoricalNaiveBayes
nbc = CategoricalNB()

#2.2 treinar o modelo com o método fit
nbc.fit(X,Y)

#2.3 obter o(s) novo(s) objeto(s) para classificar
dados_novos = {
      "love"        : [0,0,0,0,1,1,1,1],
      "people"      : [0,0,1,1,0,0,1,1],
      "relationship": [0,1,0,1,0,1,0,1],
      }
      
#novos = pd.DataFrame({"love":[1], "people":[0], "relationship": [1]})
novos = pd.DataFrame(dados_novos)

#2.4 classifica o(s) novo(s) objeto(s) com o método predict
classe_novos = nbc.predict(novos)

#2.5 obtem as probabilidades normalizadas
prob_novos = nbc.predict_proba(novos)

print('\n-novo(s) objeto(s):\n',novos)
print('\n-classe(s) predita(s) para cada objeto:\n',classe_novos)
print('\n-probabilidades estimadas para as classes {} e {}:\n'
      .format(nbc.classes_[0], nbc.classes_[1]))
print(prob_novos)

#---------------------------------------------------------------
#Aula 06-1: strings - processamento básico
#---------------------------------------------------------------
p1 = 'Lagarto Teiú'

p1_maiusc = p1.upper()       
p1_minusc = p1.lower()       

num_letras_p1 = len(p1)    
num_letras_a = p1.count('a')    
testa_endswith = p1.endswith('rto',4,7)    
testa_find = p1.find('a')    
testa_rfind = p1.rfind('a')    

p1_troca = p1.replace('a','o')
p1_split = p1.split()

p2 = '  Capivara ';
teste_strip = p2.strip();

p3 = 'ei, olha isso... uma capivara!'
sem_pontuacao = p3.translate(p3.maketrans('','',",.!")) #remove: , . !

print("p1.upper()= " + p1_maiusc)
print("p1.lower()= " + p1_minusc)
print("len(p1)= " + str(num_letras_p1))
print("p1.count('a')= " + str(num_letras_a))
print("p1.endswith('rto',4,7)= ",testa_endswith)
print("p1.find('a')= ",testa_find)
print("p1.rfind('a')= ",testa_rfind)
print("p1.replace('a','o')= " + p1_troca)
print("p1.split()= ", p1_split)
print("p2.strip()= *" + teste_strip + "*")
print("frase com pontuacao= " + p3)
print("frase sem pontuacao= " + sem_pontuacao)

p1 = 'pássaro'
p2 = 'PÁSSARO'
p3 = '123'
print(p1=='pássaro')          #True
print(p1=='PáSSaRo')          #False
print(p1==p2)                 #False
print(p1.lower()==p2.lower()) #True
print(p3 < p1)                #True 

p1 = 'áaa'
p2 = 'aaa'
p3 = 'AAA'
print(p1==p2)                 #False
print(p2 < p1)                #True
print(p2 < p3)                #False

#---------------------------------------------------------------
#Aula 06-2: arquivos (obs.: as bases de dados usadas podem 
#           ser encontradas em "bases_de_dados.zip")
#---------------------------------------------------------------
#1-processa arquivo separado por colunas usando Python básico
arq = open('ARQ_COLUNAS.txt')  #assume que arquivo está na mesma pasta do programa

for linha in arq:
    linha = linha.strip()
    
    v1 = int(linha[:4])
    v2 = linha[4:9]
    print('v1=',v1, ' v2 = ',v2)
    
arq.close()

#2-processa arquivo CSV usando Python básico
arq = open('CEPS.csv')  #assume que arquivo está na mesma pasta do programa

arq.readline() #para pular o cabeçalho

for linha in arq:
    linha = linha.strip()
   
    dados = linha.split(",")
    #print(dados)
    print(dados[0], dados[1], dados[2])

arq.close()

#---------------------------------------------------------------
#Aula 07-1: testa se array possui ao menos um valor negativo
#---------------------------------------------------------------
import numpy as np

#cria e imprime um array 2x2 de teste com valores aleatórios entre -1 e 2
a = np.random.randint(-1,3, size=(2, 2))
print(a)

#verifica se há algum negativo
if True in (a < 0): 
    print('o array possui ao menos um número negativo')
else: 
    print('o array NÃO possui nenhum número negativo')

#---------------------------------------------------------------
#Aula 07-2: cria array 5x6 com números entre 21 e 50
#---------------------------------------------------------------
import numpy as np

b = np.arange(21,51).reshape(5,6)
print(b)

#---------------------------------------------------------------
#Aula 07-3: cria array 3x10 com 1a linha=0's, 2a=1's, 3a=5's
#---------------------------------------------------------------
import numpy as np

c = np.append(np.append(np.zeros(10, dtype=np.int32),
             np.ones(10, dtype=np.int32)),np.repeat(5,10))
c = c.reshape(3,10)
print(c)

#---------------------------------------------------------------
#Aula 07-4: soma da diag. principal de matriz de ordem m
#---------------------------------------------------------------
import numpy as np

#cria e imprime um array mxm de teste com valores aleatórios entre -5 e 5
m = 4
mat = np.random.randint(-5,6, size=(m, m)) 
print(mat)

#imprime a soma da diagonal
print("soma da diag. principal = ", sum(np.diag(mat)))

#---------------------------------------------------------------
#Aula 07-5: fatiamento
#---------------------------------------------------------------
import numpy as np

#gera a matriz solicitada
np.random.seed(210720)     	    #estabelece a semente
bd = np.random.randint(1, 6, size=(7,10), dtype = np.int8)
print(bd) 

#obtém fatia
fatia = bd[3:6,2:7]
print('\nfatia:'); print(fatia)

#---------------------------------------------------------------
#Aula 07-DOJO: clustering da base "smile.csv"
#---------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

#1-carrega a base 'smile.csv' para uma matriz numpy
nom_arq = 'https://raw.githubusercontent.com/edubd/uff2020/master/progs/smile.csv'
m_smile = np.genfromtxt(nom_arq, delimiter=',') 

#2-produz um gráfico de dispersão
plt.figure(figsize=(8,8))
plt.scatter(m_smile[:,0], m_smile[:,1])
plt.title('Smile - Gráfico de Dispersão')
plt.show()

#3-Executa o clustering com o algoritmo k-means 
from sklearn.cluster import KMeans

#3.1-executa o algoritmo k-means
modelo = KMeans(n_clusters=4, random_state=0)
modelo.fit(m_smile)

grupos = modelo.labels_

#3.2-plota o gráfico com os grupos achados pelo k-means
colormap = np.array(['red','green','blue','orange'])
plt.figure(figsize=(8,8))
plt.scatter(m_smile[:,0], m_smile[:,1], c=colormap[grupos], s=40)
plt.title('Smile - Resultado do KMeans')
plt.show()

#4-Executa o clustering com o algoritmo DBSCAN
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

#4.1 aplica a transformação "StandardScaler" sobre os dados originais
#(consulte: https://towardsdatascience.com/scale-standardize-or-normalize-with-scikit-learn-6ccc7d176a02)
m_smile_transf = StandardScaler().fit_transform(m_smile)

#4.2-executa o algoritmo DBSCAN
modelo = DBSCAN().fit(m_smile_transf)

grupos = modelo.labels_

#4.3-plota o gráfico com os grupos achados pelo DBSCAN
colormap = np.array(['red','green','blue','orange'])
plt.figure(figsize=(8,8))
plt.scatter(m_smile[:,0], m_smile[:,1], c=colormap[grupos], s=40)
plt.title('Smile - Resultado do DBSCAN')
plt.show()

#---------------------------------------------------------------
#Aula 10-a: Python acessando BD sqlite, sem usar fetchall
#---------------------------------------------------------------
import sqlite3
nomeBD = 'RH.db'; 
minha_conn = sqlite3.connect(nomeBD) #(1)-Conecta com o BD

c = minha_conn.cursor(); #(2)- Executa o comando SQL
c.execute('SELECT * FROM Funcionario')

for linha in c:  print(linha) #(3)-Exibe os resultados

#---------------------------------------------------------------
#Aula 10-b: Python acessando BD sqlite com fetchall
#---------------------------------------------------------------
import sqlite3
nomeBD = 'RH.db'; 
minha_conn = sqlite3.connect(nomeBD) #(1)-Conecta com o BD

c = minha_conn.cursor(); #(2)- Executa o comando SQL
c.execute('SELECT * FROM Funcionario')

resultados = c.fetchall()
print(type(resultados))
print(resultados)

#---------------------------------------------------------------
#Aula 10-c: Python acessando BD MySQL
#---------------------------------------------------------------

#ATENÇÃO: esse exemplo não vai funcionar na máquina de vocês!
#         só funcionaria se vocês tivessem o mysql instalado,
#         com uma base chamada "world" e um usuário chamado
#         "usuario_teste" com acesso a esta base!!!

#https://www.w3schools.com/python/python_mysql_getstarted.asp
import mysql.connector

#(1)-Conecta com o BD#
minha_conn = mysql.connector.connect(
  host="localhost",
  user="usuario_teste",
  password="1234",
  database = "world"
)

print(minha_conn)

c = minha_conn.cursor() #(2)- Executa o comando SQL
c.execute("SELECT name, continent FROM country")

#resultados = c.fetchall()
for linha in c:  print(linha) #(3)-Exibe os resultados

minha_conn.close()

#---------------------------------------------------------------
#Aula 10-d: Importando JSON em Python
#---------------------------------------------------------------
import json

# parsing do documento: 
# carrega o arquivo “empregados.json” para uma ED. 
# no caso de “empregados.json”, carrega para uma lista de dicionários
with open("empregados.json") as f:
    emps = json.load(f)

#básico
print (type(emps))   # é uma lista de dicionários
print(emps)
print("total de empregados: ", len(emps))

#iterando
for empregado in emps: print(empregado) 

#concatenando nome e sobrenome
print(emps[1]['nome'], emps[1]['sobrenome'])

#buscando campo específico
nomes = [pessoa['nome'] for pessoa in emps]; print(nomes)

#fazendo buscas
os_santos = [pessoa for pessoa in emps if  pessoa["sobrenome"]=="Santos"]
print(os_santos)

#---------------------------------------------------------------
#Aula 10-e: Importando JSON para DataFrame pandas
#---------------------------------------------------------------
#import json #só precisa desse pacote se você ler o JSON de um arquivo
import pandas as pd

#informação original em JSON...
j_filmes = [
{
"titulo": "JSON x CSV",
"resumo": "o duelo entre dois formatos para representar informações",
"ano": 2020,
"generos": ["aventura", "ação", "ficção"]
},
{
"titulo": "JSON James",
"resumo": "a história de uma lenda do velho oeste",
"ano": 2018,
"generos": ["western"]
},
{
"titulo": "ENCE: O Filme",
"resumo": "Um grupo de estudantes desvenda os mistérios da Ciência de Dados",
"ano": 2021,
"generos": ["drama", "ação", "aventura"]
}
]

#... é transferida para um DataFrame!
df_filmes = pd.DataFrame(j_filmes, columns=['titulo','resumo','ano','generos'])

#Exemplo de exploração com a pandas I
#imprimindo linhas e colunas específicas
print(df_filmes.columns)
print('\n-apenas os gêneros filme 1:')
print(df_filmes.iloc[0,3])
print('\n-filme 3 (todas as informações):')
print(df_filmes.iloc[2])

#Exemplo de exploração com a pandas II
#verifica quais filmes têm o gênero "aventura"
def tem_genero(lista_generos, nome_genero):
    if nome_genero in lista_generos: 
        return 1
    else: return 0 

filtro = df_filmes['generos'].apply(tem_genero, args=('aventura',))

print('- Filmes de aventura (1=Sim, 0=Não): ')
print(filtro)
print('\n- Total de filmes de aventura (1=Sim, 0=Não): ')
print(filtro.value_counts())

#---------------------------------------------------------------
#Aula 10-f: Web Scraper "fuleiro"
#---------------------------------------------------------------
import urllib.request

#PASSO 1: obter o HTML da página-alvo
endPagina = "https://web.ics.purdue.edu/~gchopra/class/public/pages/webdesign/05_simple.html"
conteudo = urllib.request.urlopen(endPagina).read()

conteudo = conteudo.decode('utf-8') #converte conteúdo baixado de bytes para string

#PASSO 2: extrair informação de interesse usando XPath
from lxml import etree
arvore = etree.HTML(conteudo) #importal HTML para árvore DOM em memória

#obtém todos os textos associados à tag h2 usando XPath
r1 = arvore.xpath('//h2/text()')
print(r1)

#Tutorial sobre XPath -> http://www2.ic.uff.br/~vanessa/material/gdse/07-XPath.pdf
